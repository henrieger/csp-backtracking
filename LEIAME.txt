Solver: csp.py
Tradutor de DIMACS para o formato do CSP: dimacs_to_csp.py

Para resolver um problema declarado em um arquivo do CSP:
  csp.py [ARQUIVO]
ou
  [ARQUIVO] > csp.py

Para traduzir um arquivo DIMACS para o formato do CSP:
  dimacs_to_csp.py [ARQUIVO]
ou
  [ARQUIVO] > dimacs_to_csp.py

Para resolver diretamente um problema descrito em DIMACS:
  dimacs_to_csp.py [ARQUIVO] | csp.py


### ALTERAÇÕES DO TRABALHO 4 ###


EXECUTÁVEIS

Para resolver uma instância das 8 rainhas:
  gcc -Wall n-queens.c -o n-queens
  ./n-queens [QTD] | csp.py

Para resolver uma instância do Wumpus Simplificado:
- Altere a constante SAT_SOLVER em bc.h de ./minisat para ./cnf.sh
  make
  ./wumpus < instância

As instâncias DIMACS funcionam como no trabalho 3


ALTERAÇÕES GERAIS DE CÓDIGO

- Alteração no funcionamento de variáveis e restrições baseados em limitações de domínio;
- Funções `review_gac` e `gac_3` e auxiliares no código do backtracking;
- Diversas ordenações e reordenações das variáveis para implementar a heurística MRV;
- Consertos e adaptações necessárias.

Histórico de commits completo em https://github.com/henrieger/csp-backtracking


DESEMPENHO

Embora o código novo implemente a otimização GAC-3 vista em aula (generalização do algoritmo AC-3) as mudanças nas estruturas de dados e verificações parecem ter afetado significativamente o desempenho do solver, de modo que o mesmo está bem mais lento que a versão anterior.

Nos testes realizados:
- Os benchmarks de SAT solver foram resolvidos apenas até as instâncias de 20 variáveis e 91 cláusulas - as de 50 variáveis e 218 cláusulas demoraram vários minutos e não completaram;
- O problema `n-queens` só foi resolvido até uma instância de tamanho 17 (2min12s). A instância de tamanho 16 demorou 3m09s, enquanto a instância de tamanho 18 rodou por quase 7 minutos sem atingir um resultado;
- Nenhuma instância do Wumpus Simplificado foi resolvida em tempo hábil.

Os testes foram realizados em um processador Intel i7-7700 com clock de 3,6GHz e 16GB de memória RAM disponível.
